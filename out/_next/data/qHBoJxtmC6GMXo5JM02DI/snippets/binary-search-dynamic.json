{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var s=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var o=t=>a(t,\"__esModule\",{value:!0});var f=(t,i)=>()=>(i||t((i={exports:{}}).exports,i),i.exports),p=(t,i)=>{o(t);for(var n in i)a(t,n,{get:i[n],enumerable:!0})},y=(t,i,n)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let r of m(i))!g.call(t,r)&&r!==\"default\"&&a(t,r,{get:()=>i[r],enumerable:!(n=h(i,r))||n.enumerable});return t},x=t=>y(o(a(t!=null?s(u(t)):{},\"default\",t&&t.__esModule&&\"default\"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var d=f((_,c)=>{c.exports=_jsx_runtime});var w={};p(w,{default:()=>k,frontmatter:()=>b});var e=x(d()),b={title:\"Binary Search - Dynamic Implementation\",date:\"2024-01-15\",tags:[\"DSA\",\"Algorithms\",\"Binary Search\",\"Python\",\"Java\",\"C++\"],draft:!1,summary:\"Binary search implementation with interactive language selection\",images:[],layout:\"PostSimple\"};function S(t={}){let{wrapper:i}=t.components||{};return i?(0,e.jsx)(i,Object.assign({},t,{children:(0,e.jsx)(n,{})})):n();function n(){let r=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",p:\"p\",ul:\"ul\",li:\"li\",strong:\"strong\",ol:\"ol\",code:\"code\"},t.components),{CodeBlock:l}=r;return l||v(\"CodeBlock\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(r.h2,{id:\"problem\",children:[(0,e.jsx)(r.a,{\"aria-hidden\":\"true\",href:\"#problem\",tabIndex:\"-1\",children:(0,e.jsx)(r.span,{className:\"icon icon-link\"})}),\"Problem\"]}),(0,e.jsx)(r.p,{children:\"Find a target element in a sorted array using binary search algorithm.\"}),(0,e.jsxs)(r.h2,{id:\"solution\",children:[(0,e.jsx)(r.a,{\"aria-hidden\":\"true\",href:\"#solution\",tabIndex:\"-1\",children:(0,e.jsx)(r.span,{className:\"icon icon-link\"})}),\"Solution\"]}),(0,e.jsx)(l,{title:\"Binary Search Implementation\",description:\"Basic binary search with O(log n) time complexity\",mediumLink:\"https://medium.com/@yourusername/binary-search-algorithm-explained\",languages:{Python:`def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n\n# Example usage\narr = [1, 3, 5, 7, 9, 11, 13, 15]\ntarget = 7\nresult = binary_search(arr, target)\nprint(f\"Target found at index: {result}\")  # Output: 3`,Java:`public class BinarySearch {\n    public static int binarySearch(int[] arr, int target) {\n        int left = 0, right = arr.length - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            \n            if (arr[mid] == target) {\n                return mid;\n            } else if (arr[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        return -1;\n    }\n    \n    public static void main(String[] args) {\n        int[] arr = {1, 3, 5, 7, 9, 11, 13, 15};\n        int target = 7;\n        int result = binarySearch(arr, target);\n        System.out.println(\"Target found at index: \" + result); // Output: 3\n    }\n}`,\"C++\":`#include <iostream>\n#include <vector>\nusing namespace std;\n\nint binarySearch(vector<int>& arr, int target) {\n    int left = 0, right = arr.size() - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (arr[mid] == target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1;\n}\n\nint main() {\n    vector<int> arr = {1, 3, 5, 7, 9, 11, 13, 15};\n    int target = 7;\n    int result = binarySearch(arr, target);\n    cout << \"Target found at index: \" << result << endl; // Output: 3\n    return 0;\n}`}}),(0,e.jsxs)(r.h2,{id:\"time-complexity\",children:[(0,e.jsx)(r.a,{\"aria-hidden\":\"true\",href:\"#time-complexity\",tabIndex:\"-1\",children:(0,e.jsx)(r.span,{className:\"icon icon-link\"})}),\"Time Complexity\"]}),(0,e.jsxs)(r.ul,{children:[(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"Time\"}),\": O(log n) - Each iteration reduces search space by half\"]}),(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"Space\"}),\": O(1) - Only uses constant extra space\"]})]}),(0,e.jsxs)(r.h2,{id:\"key-points\",children:[(0,e.jsx)(r.a,{\"aria-hidden\":\"true\",href:\"#key-points\",tabIndex:\"-1\",children:(0,e.jsx)(r.span,{className:\"icon icon-link\"})}),\"Key Points\"]}),(0,e.jsxs)(r.ol,{children:[(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"Array must be sorted\"}),\" - Binary search only works on sorted arrays\"]}),(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"Prevent overflow\"}),\" - Use \",(0,e.jsx)(r.code,{children:\"left + (right - left) / 2\"}),\" instead of \",(0,e.jsx)(r.code,{children:\"(left + right) / 2\"})]}),(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"Boundary updates\"}),\" - Always update \",(0,e.jsx)(r.code,{children:\"left = mid + 1\"}),\" or \",(0,e.jsx)(r.code,{children:\"right = mid - 1\"})]}),(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.strong,{children:\"Termination condition\"}),\" - Loop continues while \",(0,e.jsx)(r.code,{children:\"left <= right\"})]})]}),(0,e.jsxs)(r.h2,{id:\"common-variations\",children:[(0,e.jsx)(r.a,{\"aria-hidden\":\"true\",href:\"#common-variations\",tabIndex:\"-1\",children:(0,e.jsx)(r.span,{className:\"icon icon-link\"})}),\"Common Variations\"]}),(0,e.jsxs)(r.ul,{children:[(0,e.jsx)(r.li,{children:\"Find first occurrence of target\"}),(0,e.jsx)(r.li,{children:\"Find last occurrence of target\"}),(0,e.jsx)(r.li,{children:\"Find insertion position\"}),(0,e.jsx)(r.li,{children:\"Search in rotated sorted array\"})]})]})}}var k=S;function v(t,i){throw new Error(\"Expected \"+(i?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return w;})();\n;return Component;","toc":[{"value":"Problem","url":"#problem","depth":2},{"value":"Solution","url":"#solution","depth":2},{"value":"Time Complexity","url":"#time-complexity","depth":2},{"value":"Key Points","url":"#key-points","depth":2},{"value":"Common Variations","url":"#common-variations","depth":2}],"frontMatter":{"readingTime":{"text":"3 min read","minutes":2.275,"time":136500,"words":455},"slug":"binary-search-dynamic","fileName":"binary-search-dynamic.mdx","title":"Binary Search - Dynamic Implementation","date":"2024-01-15T00:00:00.000Z","tags":["DSA","Algorithms","Binary Search","Python","Java","C++"],"draft":false,"summary":"Binary search implementation with interactive language selection","images":[],"layout":"PostSimple"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.455,"time":27300,"words":91},"slug":["default"],"fileName":"default.md","name":"Sai Abhiteja Chepuri","avatar":"/static/images/Abhi.jpeg","occupation":"Software Engineer","company":"Cloudera","email":"saiabhitejachepuri@gmail.com","twitter":"https://twitter.com/saiabhiteja","linkedin":"https://www.linkedin.com/in/saiabhitejachepuri/","github":"https://github.com/saiabhiteja","text1":"I am a Software Engineer at Cloudera, passionate about building scalable software solutions and exploring new technologies and learn something new daily","text2":"I enjoy solving complex engineering challenges and sharing knowledge through technical writing.","text3":"When not coding, you can find me playing cricket, watching movies, travelling with friends or family. I'm always eager to learn new technologies and collaborate on interesting projects.","date":null}],"prev":{"title":"Linked List - Dynamic Implementation","date":"2024-01-15T00:00:00.000Z","tags":["DSA","Data Structures","Linked List","Python","Java","C++"],"draft":false,"summary":"Linked list implementation with interactive language selection","images":[],"layout":"PostSimple","slug":"linkedlist-dynamic"},"next":null},"__N_SSG":true}