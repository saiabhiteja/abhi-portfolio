{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var c=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var s=t=>l(t,\"__esModule\",{value:!0});var m=(t,r)=>()=>(r||t((r={exports:{}}).exports,r),r.exports),x=(t,r)=>{s(t);for(var i in r)l(t,i,{get:r[i],enumerable:!0})},f=(t,r,i)=>{if(r&&typeof r==\"object\"||typeof r==\"function\")for(let n of h(r))!v.call(t,n)&&n!==\"default\"&&l(t,n,{get:()=>r[n],enumerable:!(i=u(r,n))||i.enumerable});return t},L=t=>f(s(l(t!=null?c(p(t)):{},\"default\",t&&t.__esModule&&\"default\"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var o=m((y,a)=>{a.exports=_jsx_runtime});var k={};x(k,{default:()=>_,frontmatter:()=>N});var e=L(o()),N={title:\"Linked List - Dynamic Implementation\",date:\"2024-01-15\",tags:[\"DSA\",\"Data Structures\",\"Linked List\",\"Python\",\"Java\",\"C++\"],draft:!1,summary:\"Linked list implementation with interactive language selection\",images:[],layout:\"PostSimple\"};function g(t={}){let{wrapper:r}=t.components||{};return r?(0,e.jsx)(r,Object.assign({},t,{children:(0,e.jsx)(i,{})})):i();function i(){let n=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",p:\"p\",ul:\"ul\",li:\"li\",strong:\"strong\",ol:\"ol\"},t.components),{CodeBlock:d}=n;return d||w(\"CodeBlock\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.h2,{id:\"problem\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#problem\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Problem\"]}),(0,e.jsx)(n.p,{children:\"Implement basic linked list operations: insert, delete, and reverse.\"}),(0,e.jsxs)(n.h2,{id:\"solution\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#solution\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Solution\"]}),(0,e.jsx)(d,{title:\"Linked List Implementation\",description:\"Basic linked list with insert, delete, and reverse operations\",mediumLink:\"https://medium.com/@yourusername/linked-list-data-structure-guide\",languages:{Python:`class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def insert_at_end(self, val):\n        new_node = ListNode(val)\n        if not self.head:\n            self.head = new_node\n            return\n        \n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n    \n    def delete_node(self, val):\n        if not self.head:\n            return False\n        \n        if self.head.val == val:\n            self.head = self.head.next\n            return True\n        \n        current = self.head\n        while current.next:\n            if current.next.val == val:\n                current.next = current.next.next\n                return True\n            current = current.next\n        return False\n    \n    def reverse(self):\n        prev = None\n        current = self.head\n        \n        while current:\n            next_node = current.next\n            current.next = prev\n            prev = current\n            current = next_node\n        \n        self.head = prev\n    \n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.val, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage\nll = LinkedList()\nll.insert_at_end(1)\nll.insert_at_end(2)\nll.insert_at_end(3)\nll.print_list()  # 1 -> 2 -> 3 -> None\n\nll.reverse()\nll.print_list()  # 3 -> 2 -> 1 -> None`,Java:`class ListNode {\n    int val;\n    ListNode next;\n    \n    ListNode(int val) {\n        this.val = val;\n        this.next = null;\n    }\n}\n\nclass LinkedList {\n    ListNode head;\n    \n    public void insertAtEnd(int val) {\n        ListNode newNode = new ListNode(val);\n        \n        if (head == null) {\n            head = newNode;\n            return;\n        }\n        \n        ListNode current = head;\n        while (current.next != null) {\n            current = current.next;\n        }\n        current.next = newNode;\n    }\n    \n    public boolean deleteNode(int val) {\n        if (head == null) {\n            return false;\n        }\n        \n        if (head.val == val) {\n            head = head.next;\n            return true;\n        }\n        \n        ListNode current = head;\n        while (current.next != null) {\n            if (current.next.val == val) {\n                current.next = current.next.next;\n                return true;\n            }\n            current = current.next;\n        }\n        return false;\n    }\n    \n    public void reverse() {\n        ListNode prev = null;\n        ListNode current = head;\n        \n        while (current != null) {\n            ListNode nextNode = current.next;\n            current.next = prev;\n            prev = current;\n            current = nextNode;\n        }\n        \n        head = prev;\n    }\n    \n    public void printList() {\n        ListNode current = head;\n        while (current != null) {\n            System.out.print(current.val + \" -> \");\n            current = current.next;\n        }\n        System.out.println(\"null\");\n    }\n    \n    public static void main(String[] args) {\n        LinkedList ll = new LinkedList();\n        ll.insertAtEnd(1);\n        ll.insertAtEnd(2);\n        ll.insertAtEnd(3);\n        ll.printList(); // 1 -> 2 -> 3 -> null\n        \n        ll.reverse();\n        ll.printList(); // 3 -> 2 -> 1 -> null\n    }\n}`,\"C++\":`#include <iostream>\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode* next;\n    \n    ListNode(int val) : val(val), next(nullptr) {}\n};\n\nclass LinkedList {\nprivate:\n    ListNode* head;\n    \npublic:\n    LinkedList() : head(nullptr) {}\n    \n    void insertAtEnd(int val) {\n        ListNode* newNode = new ListNode(val);\n        \n        if (head == nullptr) {\n            head = newNode;\n            return;\n        }\n        \n        ListNode* current = head;\n        while (current->next != nullptr) {\n            current = current->next;\n        }\n        current->next = newNode;\n    }\n    \n    bool deleteNode(int val) {\n        if (head == nullptr) {\n            return false;\n        }\n        \n        if (head->val == val) {\n            ListNode* temp = head;\n            head = head->next;\n            delete temp;\n            return true;\n        }\n        \n        ListNode* current = head;\n        while (current->next != nullptr) {\n            if (current->next->val == val) {\n                ListNode* temp = current->next;\n                current->next = current->next->next;\n                delete temp;\n                return true;\n            }\n            current = current->next;\n        }\n        return false;\n    }\n    \n    void reverse() {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextNode = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextNode;\n        }\n        \n        head = prev;\n    }\n    \n    void printList() {\n        ListNode* current = head;\n        while (current != nullptr) {\n            cout << current->val << \" -> \";\n            current = current->next;\n        }\n        cout << \"null\" << endl;\n    }\n};\n\nint main() {\n    LinkedList ll;\n    ll.insertAtEnd(1);\n    ll.insertAtEnd(2);\n    ll.insertAtEnd(3);\n    ll.printList(); // 1 -> 2 -> 3 -> null\n    \n    ll.reverse();\n    ll.printList(); // 3 -> 2 -> 1 -> null\n    return 0;\n}`}}),(0,e.jsxs)(n.h2,{id:\"time-complexity\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#time-complexity\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Time Complexity\"]}),(0,e.jsxs)(n.ul,{children:[(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Insert at end\"}),\": O(n) - Need to traverse to the end\"]}),(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Delete\"}),\": O(n) - Need to find the node to delete\"]}),(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Reverse\"}),\": O(n) - Need to visit each node once\"]})]}),(0,e.jsxs)(n.h2,{id:\"key-points\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#key-points\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Key Points\"]}),(0,e.jsxs)(n.ol,{children:[(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Null pointer checks\"}),\" - Always check for null before accessing next\"]}),(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Head pointer updates\"}),\" - Update head when inserting/deleting first element\"]}),(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Memory management\"}),\" - In C++, remember to delete nodes to prevent memory leaks\"]}),(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Temporary variables\"}),\" - Use temp variables to avoid losing references during operations\"]})]}),(0,e.jsxs)(n.h2,{id:\"common-operations\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#common-operations\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Common Operations\"]}),(0,e.jsxs)(n.ul,{children:[(0,e.jsx)(n.li,{children:\"Insert at beginning (O(1))\"}),(0,e.jsx)(n.li,{children:\"Insert at end (O(n))\"}),(0,e.jsx)(n.li,{children:\"Delete by value (O(n))\"}),(0,e.jsx)(n.li,{children:\"Reverse (O(n))\"}),(0,e.jsx)(n.li,{children:\"Detect cycle (O(n) time, O(1) space with Floyd's algorithm)\"})]})]})}}var _=g;function w(t,r){throw new Error(\"Expected \"+(r?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k;})();\n;return Component;","toc":[{"value":"Problem","url":"#problem","depth":2},{"value":"Solution","url":"#solution","depth":2},{"value":"Time Complexity","url":"#time-complexity","depth":2},{"value":"Key Points","url":"#key-points","depth":2},{"value":"Common Operations","url":"#common-operations","depth":2}],"frontMatter":{"readingTime":{"text":"4 min read","minutes":3.72,"time":223200,"words":744},"slug":"linkedlist-dynamic","fileName":"linkedlist-dynamic.mdx","title":"Linked List - Dynamic Implementation","date":"2024-01-15T00:00:00.000Z","tags":["DSA","Data Structures","Linked List","Python","Java","C++"],"draft":false,"summary":"Linked list implementation with interactive language selection","images":[],"layout":"PostSimple"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.455,"time":27300,"words":91},"slug":["default"],"fileName":"default.md","name":"Sai Abhiteja Chepuri","avatar":"/static/images/Abhi.jpeg","occupation":"Software Engineer","company":"Cloudera","email":"saiabhitejachepuri@gmail.com","twitter":"https://twitter.com/saiabhiteja","linkedin":"https://www.linkedin.com/in/saiabhitejachepuri/","github":"https://github.com/saiabhiteja","text1":"I am a Software Engineer at Cloudera, passionate about building scalable software solutions and exploring new technologies and learn something new daily","text2":"I enjoy solving complex engineering challenges and sharing knowledge through technical writing.","text3":"When not coding, you can find me playing cricket, watching movies, travelling with friends or family. I'm always eager to learn new technologies and collaborate on interesting projects.","date":null}],"prev":{"title":"Quick Sort Algorithm","date":"2024-01-15T00:00:00.000Z","tags":["DSA","Sorting","Algorithm","Python","Java","C++"],"draft":false,"summary":"Efficient divide-and-conquer sorting algorithm with O(n log n) average time complexity","images":[],"layout":"PostSimple","slug":"quick-sort-dynamic"},"next":{"title":"Binary Search - Dynamic Implementation","date":"2024-01-15T00:00:00.000Z","tags":["DSA","Algorithms","Binary Search","Python","Java","C++"],"draft":false,"summary":"Binary search implementation with interactive language selection","images":[],"layout":"PostSimple","slug":"binary-search-dynamic"}},"__N_SSG":true}