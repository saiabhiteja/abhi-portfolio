{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var l=e=>a(e,\"__esModule\",{value:!0});var g=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),f=(e,t)=>{l(e);for(var n in t)a(e,n,{get:t[n],enumerable:!0})},v=(e,t,n)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of p(t))!m.call(e,r)&&r!==\"default\"&&a(e,r,{get:()=>t[r],enumerable:!(n=d(t,r))||n.enumerable});return e},x=e=>v(l(a(e!=null?h(u(e)):{},\"default\",e&&e.__esModule&&\"default\"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var s=g((q,c)=>{c.exports=_jsx_runtime});var j={};f(j,{default:()=>w,frontmatter:()=>k});var i=x(s()),k={title:\"Quick Sort Algorithm\",date:\"2024-01-15\",tags:[\"DSA\",\"Sorting\",\"Algorithm\",\"Python\",\"Java\",\"C++\"],draft:!1,summary:\"Efficient divide-and-conquer sorting algorithm with O(n log n) average time complexity\",images:[],layout:\"PostSimple\"};function y(e={}){let{wrapper:t}=e.components||{};return t?(0,i.jsx)(t,Object.assign({},e,{children:(0,i.jsx)(n,{})})):n();function n(){let r=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",p:\"p\",ul:\"ul\",li:\"li\",strong:\"strong\",ol:\"ol\"},e.components),{CodeBlock:o}=r;return o||S(\"CodeBlock\",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.h2,{id:\"problem\",children:[(0,i.jsx)(r.a,{\"aria-hidden\":\"true\",href:\"#problem\",tabIndex:\"-1\",children:(0,i.jsx)(r.span,{className:\"icon icon-link\"})}),\"Problem\"]}),(0,i.jsx)(r.p,{children:\"Sort an array of elements efficiently using the Quick Sort algorithm, which uses a divide-and-conquer approach with a pivot element.\"}),(0,i.jsxs)(r.h2,{id:\"solution\",children:[(0,i.jsx)(r.a,{\"aria-hidden\":\"true\",href:\"#solution\",tabIndex:\"-1\",children:(0,i.jsx)(r.span,{className:\"icon icon-link\"})}),\"Solution\"]}),(0,i.jsx)(o,{title:\"Quick Sort Implementation\",description:\"Divide-and-conquer sorting algorithm using pivot element\",mediumLink:\"https://medium.com/@saiabhiteja/quick-sort-algorithm-explained\",languages:{Python:`def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    return quick_sort(left) + middle + quick_sort(right)\n\n# Example usage\narr = [64, 34, 25, 12, 22, 11, 90]\nsorted_arr = quick_sort(arr)\nprint(f\"Original: {arr}\")\nprint(f\"Sorted: {sorted_arr}\")`,Java:`public class QuickSort {\n    public static void quickSort(int[] arr, int low, int high) {\n        if (low < high) {\n            int pi = partition(arr, low, high);\n            quickSort(arr, low, pi - 1);\n            quickSort(arr, pi + 1, high);\n        }\n    }\n    \n    private static int partition(int[] arr, int low, int high) {\n        int pivot = arr[high];\n        int i = low - 1;\n        \n        for (int j = low; j < high; j++) {\n            if (arr[j] <= pivot) {\n                i++;\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        \n        int temp = arr[i + 1];\n        arr[i + 1] = arr[high];\n        arr[high] = temp;\n        \n        return i + 1;\n    }\n    \n    public static void main(String[] args) {\n        int[] arr = {64, 34, 25, 12, 22, 11, 90};\n        quickSort(arr, 0, arr.length - 1);\n        System.out.println(\"Sorted array: \" + Arrays.toString(arr));\n    }\n}`,\"C++\":`#include <iostream>\n#include <vector>\nusing namespace std;\n\nint partition(vector<int>& arr, int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    \n    for (int j = low; j < high; j++) {\n        if (arr[j] <= pivot) {\n            i++;\n            swap(arr[i], arr[j]);\n        }\n    }\n    \n    swap(arr[i + 1], arr[high]);\n    return i + 1;\n}\n\nvoid quickSort(vector<int>& arr, int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n\nint main() {\n    vector<int> arr = {64, 34, 25, 12, 22, 11, 90};\n    quickSort(arr, 0, arr.size() - 1);\n    \n    cout << \"Sorted array: \";\n    for (int num : arr) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}`}}),(0,i.jsxs)(r.h2,{id:\"time-complexity\",children:[(0,i.jsx)(r.a,{\"aria-hidden\":\"true\",href:\"#time-complexity\",tabIndex:\"-1\",children:(0,i.jsx)(r.span,{className:\"icon icon-link\"})}),\"Time Complexity\"]}),(0,i.jsxs)(r.ul,{children:[(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:\"Time\"}),\": O(n log n) average case, O(n\\xB2) worst case\"]}),(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:\"Space\"}),\": O(log n) average case due to recursion stack\"]})]}),(0,i.jsxs)(r.h2,{id:\"key-points\",children:[(0,i.jsx)(r.a,{\"aria-hidden\":\"true\",href:\"#key-points\",tabIndex:\"-1\",children:(0,i.jsx)(r.span,{className:\"icon icon-link\"})}),\"Key Points\"]}),(0,i.jsxs)(r.ol,{children:[(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:\"Pivot Selection\"}),\": Choose a pivot element (first, last, middle, or random)\"]}),(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:\"Partitioning\"}),\": Divide array into elements smaller and larger than pivot\"]}),(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:\"Recursion\"}),\": Recursively sort the sub-arrays\"]}),(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:\"In-place\"}),\": Can be implemented to sort in-place without extra space\"]}),(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:\"Unstable\"}),\": Relative order of equal elements may change\"]})]}),(0,i.jsxs)(r.h2,{id:\"when-to-use\",children:[(0,i.jsx)(r.a,{\"aria-hidden\":\"true\",href:\"#when-to-use\",tabIndex:\"-1\",children:(0,i.jsx)(r.span,{className:\"icon icon-link\"})}),\"When to Use\"]}),(0,i.jsxs)(r.ul,{children:[(0,i.jsx)(r.li,{children:\"When you need average-case O(n log n) performance\"}),(0,i.jsx)(r.li,{children:\"When in-place sorting is preferred\"}),(0,i.jsx)(r.li,{children:\"When cache performance is important (good locality)\"}),(0,i.jsx)(r.li,{children:\"When you need a simple, efficient sorting algorithm\"})]})]})}}var w=y;function S(e,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return j;})();\n;return Component;","toc":[{"value":"Problem","url":"#problem","depth":2},{"value":"Solution","url":"#solution","depth":2},{"value":"Time Complexity","url":"#time-complexity","depth":2},{"value":"Key Points","url":"#key-points","depth":2},{"value":"When to Use","url":"#when-to-use","depth":2}],"frontMatter":{"readingTime":{"text":"3 min read","minutes":2.505,"time":150300,"words":501},"slug":"quick-sort-dynamic","fileName":"quick-sort-dynamic.mdx","title":"Quick Sort Algorithm","date":"2024-01-15T00:00:00.000Z","tags":["DSA","Sorting","Algorithm","Python","Java","C++"],"draft":false,"summary":"Efficient divide-and-conquer sorting algorithm with O(n log n) average time complexity","images":[],"layout":"PostSimple"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.455,"time":27300,"words":91},"slug":["default"],"fileName":"default.md","name":"Sai Abhiteja Chepuri","avatar":"/static/images/Abhi.jpeg","occupation":"Software Engineer","company":"Cloudera","email":"saiabhitejachepuri@gmail.com","twitter":"https://twitter.com/saiabhiteja","linkedin":"https://www.linkedin.com/in/saiabhitejachepuri/","github":"https://github.com/saiabhiteja","text1":"I am a Software Engineer at Cloudera, passionate about building scalable software solutions and exploring new technologies and learn something new daily","text2":"I enjoy solving complex engineering challenges and sharing knowledge through technical writing.","text3":"When not coding, you can find me playing cricket, watching movies, travelling with friends or family. I'm always eager to learn new technologies and collaborate on interesting projects.","date":null}],"prev":null,"next":{"title":"Linked List - Dynamic Implementation","date":"2024-01-15T00:00:00.000Z","tags":["DSA","Data Structures","Linked List","Python","Java","C++"],"draft":false,"summary":"Linked list implementation with interactive language selection","images":[],"layout":"PostSimple","slug":"linkedlist-dynamic"}},"__N_SSG":true}